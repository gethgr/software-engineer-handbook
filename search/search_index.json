{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Software Engineer Handbook","text":"<p>Welcome to the Software Engineer Handbook, a practical guide containing a collection of must-know commands and tips for various tools commonly used in software engineering.</p> <p>This repository provides quick references for everyday tools and commands used in modern development workflows. It is specifically designed for developers working with Python, Django, testing frameworks, task queues, Docker, CI/CD pipelines, Git, and more.</p>"},{"location":"#project-overview","title":"Project Overview","text":"<p>This project is intended to be a comprehensive, self-contained collection of helpful commands, configuration tips, and resources, structured into several categories. Each category covers tools or libraries that are vital to the development process, especially in the context of Python-based web development.</p>"},{"location":"#categories","title":"Categories","text":"<p>The handbook is organized into the following categories:</p> <ul> <li><code>Git</code>: Version control for managing source code.</li> <li><code>Django</code>: Python web framework for backend development.</li> <li><code>PostgreSQL</code>: Relational database system often used with Django.</li> <li><code>Pytest</code>: Python testing framework for unit and functional tests.</li> <li><code>Docker</code>: Platform for containerization and deployment.</li> <li><code>Celery</code>: Asynchronous task queue for background tasks.</li> <li><code>RabbitMQ</code>: Message broker for communication between services.</li> <li><code>Redis</code>: In-memory data store for caching and queue management.</li> <li><code>Poetry</code>: Dependency management tool for Python projects.</li> <li><code>CI/CD</code>: Automation of build, test, and deployment processes.</li> <li><code>Linux</code>: Command-line and system management for development.</li> </ul>"},{"location":"celery/","title":"\u2699\ufe0f Celery Commands Cheat Sheet","text":"<p>Practical guide for most common and usefull commands for Celery.</p>"},{"location":"celery/#running-celery-workers","title":"\ud83e\udde9\ufe0f Running Celery Workers","text":"<pre><code>celery -A proj worker --loglevel=info\n# Starts a Celery worker for the project `proj` with log level set to info.\n\ncelery -A proj worker --loglevel=debug\n# Starts a Celery worker for the project `proj` with log level set to debug (more detailed logs).\n\ncelery -A proj worker --concurrency=4\n# Start the worker with a specific number of concurrent tasks (4 in this case).\n</code></pre>"},{"location":"celery/#celery-beat-scheduler","title":"\ud83d\udee0\ufe0f Celery Beat Scheduler","text":"<pre><code>celery -A proj beat --loglevel=info\n# Starts the Celery Beat scheduler, which periodically schedules tasks.\n</code></pre>"},{"location":"celery/#utilities-debugging","title":"\ud83e\uddee Utilities &amp; Debugging","text":"<pre><code>celery -A proj status\n# Display the status of workers.\n\ncelery -A proj inspect active\n# Show active tasks currently being processed by the workers.\n\ncelery -A proj inspect scheduled\n# Show scheduled tasks that are about to be executed.\n\ncelery -A proj inspect reserved\n# Show reserved tasks waiting to be executed.\n</code></pre>"},{"location":"celery/#restarting-shutting-down-workers","title":"\ud83d\udd04 Restarting &amp; Shutting Down Workers","text":"<pre><code>celery -A proj control shutdown\n# Gracefully shuts down all Celery workers.\n\ncelery -A proj control restart\n# Gracefully restarts all Celery workers.\n</code></pre>"},{"location":"celery/#purging-celery-queues","title":"\ud83e\uddf9 Purging Celery Queues","text":"<pre><code>celery -A proj result &lt;task_id&gt;\n# Retrieve the result of a specific task using its task ID.\n\ncelery -A proj revoke &lt;task_id&gt;\n# Revoke a specific task by task ID, preventing it from executing.\n</code></pre>"},{"location":"celery/#custom-commands","title":"\ud83e\uddf1 Custom Commands","text":"<pre><code>celery -A proj flower\n# Starts Flower, a real-time web-based monitoring tool for Celery.\n</code></pre>"},{"location":"celery/#worker-supervision-optional","title":"\ud83e\uddef Worker Supervision (Optional)","text":"<pre><code>celery -A proj multi start worker1 worker2\n# Starts multiple workers with different names (worker1, worker2).\n\ncelery -A proj multi stopwait worker1 worker2\n# Stops the multiple workers gracefully (waits for them to finish processing current tasks).\n</code></pre>"},{"location":"django/","title":"\u2699\ufe0f Django Commands Cheat Sheet","text":"<p>Practical guide for most common and usefull commands for Django (manage.py).</p>"},{"location":"django/#development","title":"\ud83e\udde9\ufe0f Development","text":"<pre><code>python manage.py runserver\n# Starts the local server at the default port.\n\npython manage.py shell\n# Starts a Python shell with access to Django models.\n\npython manage.py check\n# Check for project configuration errors.\n</code></pre>"},{"location":"django/#database-migrations","title":"\ud83d\udc83\ufe0f Database &amp; Migrations","text":"<pre><code>python manage.py makemigrations\n# Create new migration files for all installed apps that have changes.\n\npython manage.py migrate\n# Apply migrations to the database.\n\npython manage.py showmigrations\n# Display all migrations and their applied status.\n\npython manage.py sqlmigrate app_name 0001\n# Display the SQL query belonging to the migration.\n\npython manage.py flush\n# Delete all data and reset the database to its initial state.\n</code></pre>"},{"location":"django/#users-authentication","title":"\ud83d\udc64 Users &amp; Authentication","text":"<pre><code>python manage.py createsuperuser\n# Create an admin user.\n\npython manage.py changepassword username\n# Change password for a user.\n</code></pre>"},{"location":"django/#static-files","title":"\ud83e\uddf9 Static Files","text":"<pre><code>python manage.py collectstatic\n# Collect all static files in STATIC_ROOT.\n\npython manage.py findstatic css/style.css\n# Find the path of the current static file.\n</code></pre>"},{"location":"django/#fixtures-data","title":"\ud83d\udce6 Fixtures &amp; Data","text":"<pre><code>python manage.py dumpdata &gt; data.json\n# Export data from the database into a JSON file.\n\npython manage.py loaddata data.json\n# Import data from a JSON file.\n\npython manage.py dbshell\n# Open the database shell.\n</code></pre>"},{"location":"django/#utilities-debugging","title":"\ud83e\uddee Utilities &amp; Debugging","text":"<pre><code>python manage.py diffsettings\n# Displays the differences between current settings and default settings.\n\npython manage.py showmigrations\n# Displays the migrations and their applied status.\n\npython manage.py show_urls\n# (django-extensions) Displays all registered URLs.\n\npython manage.py runscript script_name\n# (django-extensions) Executes a custom Python script.\n</code></pre>"},{"location":"django/#custom-commands","title":"\ud83e\uddf1 Custom Commands","text":"<pre><code>python manage.py my_custom_command\n# Run the custom management command from app/management/commands/\n</code></pre>"},{"location":"postgresql/","title":"\u2699\ufe0f PostgresQL Commands Cheat Sheet","text":"<p>Practical guide for most common and usefull commands for PostgresQL.</p>"},{"location":"postgresql/#database-operations","title":"\ud83e\udde9\ufe0f Database Operations","text":"<pre><code>psql -U username -d dbname\n# Connect to PostgreSQL database with a specific username and database.\n\npsql -h localhost -U username -d dbname\n# Connect to PostgreSQL on a specific host (e.g., localhost).\n\npsql\n# Connect to PostgreSQL as the default user and database.\n</code></pre>"},{"location":"postgresql/#database-management","title":"\ud83d\udca1 Database Management","text":"<pre><code>createdb dbname\n# Create a new PostgreSQL database.\n\ndropdb dbname\n# Delete a PostgreSQL database.\n\nlist\n# List all databases in PostgreSQL.\n\n\\l\n# Show list of all databases (inside psql shell).\n\n\\c dbname\n# Connect to a specific database inside psql shell.\n</code></pre>"},{"location":"postgresql/#table-management","title":"\ud83d\udd27 Table Management","text":"<pre><code>CREATE TABLE table_name (\n    column_name column_type,\n    ...\n);\n# Create a new table in PostgreSQL. Define column names and types (e.g., INTEGER, TEXT, DATE).\n\nDROP TABLE table_name;\n# Drop a table in PostgreSQL (delete the table and all its data).\n\n\\dt\n# List all tables in the current database.\n\n\\d table_name\n# Show the schema of a specific table, including columns, data types, and constraints.\n</code></pre>"},{"location":"postgresql/#querying-modifying-data","title":"\ud83d\udee0\ufe0f Querying &amp; Modifying Data","text":"<pre><code>SELECT * FROM table_name;\n# Retrieve all records from a table.\n\nSELECT column_name FROM table_name;\n# Retrieve specific column(s) from a table.\n\nINSERT INTO table_name (column1, column2, ...) VALUES (value1, value2, ...);\n# Insert data into a table.\n\nUPDATE table_name SET column_name = value WHERE condition;\n# Update data in a table.\n\nDELETE FROM table_name WHERE condition;\n# Delete data from a table.\n</code></pre>"},{"location":"postgresql/#indexes-constraints","title":"\ud83d\udd0d Indexes &amp; Constraints","text":"<pre><code>CREATE INDEX index_name ON table_name (column_name);\n# Create an index on a specific column.\n\nDROP INDEX index_name;\n# Drop an existing index.\n\nALTER TABLE table_name ADD CONSTRAINT constraint_name CHECK (condition);\n# Add a constraint to a table.\n\n\\di\n# List all indexes in the current database.\n</code></pre>"},{"location":"postgresql/#users-permissions","title":"\ud83d\udd11 Users &amp; Permissions","text":"<pre><code>CREATE USER username WITH PASSWORD 'password';\n# Create a new user in PostgreSQL.\n\nDROP USER username;\n# Delete a user.\n\nGRANT ALL PRIVILEGES ON DATABASE dbname TO username;\n# Grant all privileges on a database to a user.\n\n\\du\n# List all PostgreSQL roles (users).\n</code></pre>"},{"location":"postgresql/#backup-restore","title":"\ud83d\udd04 Backup &amp; Restore","text":"<pre><code>pg_dump dbname &gt; backup.sql\n# Dump the database into a SQL file (backup).\n\npsql dbname &lt; backup.sql\n# Restore the database from a SQL file.\n\npg_dump -U username -h localhost dbname &gt; backup.sql\n# Dump a specific database from a specific host.\n\npg_restore -U username -d dbname backup.tar\n# Restore from a binary backup (e.g., from .tar file).\n</code></pre>"},{"location":"postgresql/#utilities-debugging","title":"\ud83e\uddee Utilities &amp; Debugging","text":"<pre><code>EXPLAIN ANALYZE SELECT * FROM table_name;\n# Analyze the query execution plan.\n\n\\i path_to_file.sql\n# Run an SQL script file inside the psql shell.\n\n\\q\n# Quit the psql shell.\n</code></pre>"}]}